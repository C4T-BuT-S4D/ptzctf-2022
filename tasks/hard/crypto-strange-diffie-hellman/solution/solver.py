#!/usr/bin/env python3

import hashlib

from Crypto.Util import Padding
from Crypto.Cipher import AES


def discrete_log(g, a, p, factor):
    m = int(factor ** 0.5) * 2

    table = {}
    current = 1

    for i in range(m):
        table[current] = i
        current = (current * g) % p

    current = a
    g_inv = pow(g, -m, p)

    for i in range(m):
        if current in table:
            return table[current] + i * m

        current = (current * g_inv) % p


def main():
    g = 8476622632313129016982947409577884906865876301959712210309804472839027364435399309804489024726766275303878239938336572100103966460214072310322606181095018398249318693697663178486583531335808024824487386757521446947176947883591839956446486551399484709985165305288440358547854343147800794445454266924339690994709084287885029983369872755284497963038488671559137457421033987615726826464516764238611067049717286796258555992591395322196500812404459774394130014499079066053359965276973606335319903473419315891937619039983586476065565617648748506414018157237218517153136134644496871756006729643565698618141818808523913132076
    p = 8605866868275059233604126547567234804881902200124819782775368353082871232477355219853915710985084458097934084539541828260770592874500920974214217339114843155390408571568122169495948608352341046436885353690208046950358779703844190778750398501493866285821447215961475756878464101419401375050131163599234580559033662936050075435570607584891186956828311989299220150682103843150508365551502951845979637751849151032612017593255208422465100323784229292240090148361821078251583029659874288664482384393076576721107239985622615396186580355785454537984375101436152137834682524619558739090462418961491605559976049991932092254443

    alice_public = 3312764701482716263550311607361617303331570940479870004788999874514042524627264351318360691130864643563599575181019813443550959506213994936054678496923753146849142012998216624712077534729415342091670762885549589362374732189705311217568974400761574958297062937382769068418884887785543430815493514537764447560013332955261466110446880952473795822736917803537971496498886880871993742993971113434347159768708559735527861462804208529455035289864633325264381382403092950791176657554413437145968872233396174073190019492727223261510219608086492697183540814311701723900133901282373035938843387748386694065836058772631698088510
    bob_public = 4875045070961388176528410161460282587009726617731134108503890114837733033464752098703178632620804139506833031764748689940225604533732657107715644714078570998011205678160202122440083993856237281076673831772590884413915905389172880441981253278948528340453691277419253444717996765442683027307476699984907089510033938289532625539498078526890708025004803841604742042724297597385847787896973878048870607246712436744040350537780127562194826222270061316819585717195170106674237469072820492988960453104688402600404227910625801773235636952950281695419467048447309063299404371653754461782978961601587722318473390373837268746649
    ciphertext = 'e192903382d0086e7c301e9ad024de51cd0618741c0dbc39f60d050cc1999419b8e27a1153a0b9610066d07dc6e12952'

    factor = 1858542031

    assert pow(g, factor, p) == 1

    alice_secret = discrete_log(g, alice_public, p, factor)
    assert pow(g, alice_secret, p) == alice_public

    alice_shared = pow(bob_public, alice_secret, p)

    key = hashlib.sha256(str(alice_shared).encode()).digest()
    cipher = AES.new(mode = AES.MODE_ECB, key = key)

    plaintext = cipher.decrypt(bytes.fromhex(ciphertext))
    flag = Padding.unpad(plaintext, AES.block_size)

    print(flag)


if __name__ == '__main__':
    main()
